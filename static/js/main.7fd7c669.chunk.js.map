{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ALL_COLORS","SIZE_OPTIONS","Card","props","useState","hover","setHover","card","flipped","color","classNames","newMatch","matched","style","width","backgroundColor","gameOver","boxShadow","className","join","onClick","disableClicks","flipCard","onMouseEnter","onMouseLeave","popColor","colorVals","i","Math","floor","random","length","splice","createCards","size","numColors","cards","Array","fill","map","numSet","randRow","randCol","countFlippedUnmatched","flat","filter","x","getMatchingCards","checkMatch","matchingCards","every","makeMatch","forEach","unflipUnmatchedCards","updateCards","setDisableClicks","a","Promise","resolve","setTimeout","flashNewMatch","checkWin","ResetButton","resetFunc","gameInProgressFunc","window","confirm","SizeSelector","selectFunc","currentSize","key","App","setSize","setGameOver","flipCount","gameInProgress","some","useEffect","newSize","row","j","bind","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fd7c669.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\n// 22 colors\nconst ALL_COLORS = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']\nconst SIZE_OPTIONS = [[3, 4], [3, 6], [4, 6], [4, 8]]\n\nfunction Card (props) {\n  const [hover, setHover] = useState(false)\n  const { flipped, color } = props.card\n  const classNames = [\n    'card',\n    flipped ? 'flipped' : '',\n    props.card.newMatch ? 'newMatch' : '',\n    props.card.matched ? 'matched' : ''\n  ]\n  const style = { width: props.width }\n  if (flipped) style.backgroundColor = color\n  if (hover && !props.gameOver && !props.newMatch) {\n    style.boxShadow = '0 0 10px lightgrey' // hover style\n  }\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      style={style}\n      onClick={props.disableClicks ? null : props.flipCard}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n    />\n  )\n}\n\nfunction popColor (colorVals) {\n  // take a rand color and remove it from the original list\n  const i = Math.floor(Math.random() * colorVals.length)\n  const removedColor = colorVals.splice(i, 1)[0]\n  return removedColor\n}\n\nfunction createCards (size) {\n  const numColors = size[0] * size[1] / 2\n  const cards = new Array(size[0]).fill().map(() => new Array(size[1]).fill()) // make matrix\n  const colorVals = [...ALL_COLORS]\n  // assign a color to each card\n  for (let i = 0; i < numColors; i++) {\n    const color = popColor(colorVals)\n    let numSet = 0\n    while (numSet < 2) { // set each color to two random cards\n      const randRow = Math.floor(Math.random() * size[0])\n      const randCol = Math.floor(Math.random() * size[1])\n      if (!cards[randRow][randCol]) {\n        cards[randRow][randCol] = { color }\n        numSet++\n      }\n    }\n  }\n  return cards\n}\n\nfunction countFlippedUnmatched (cards) {\n  return cards.flat().filter(x => x.flipped && !x.matched).length\n}\n\nfunction getMatchingCards (cards, card) {\n  // return [arg card, other card with same color]\n  return cards.flat().filter(x => x.color === card.color)\n}\n\nfunction checkMatch (matchingCards) {\n  return matchingCards.every(x => x.flipped)\n}\n\nfunction makeMatch (matchingCards) {\n  matchingCards.forEach(x => {\n    x.matched = true\n    x.flipped = true\n  })\n}\n\nasync function unflipUnmatchedCards (cards, updateCards, setDisableClicks) {\n  setDisableClicks(true) // disable clicks during the unflipping\n  await new Promise(resolve => setTimeout(resolve, 850)) // wait in ms, pause so user sees color\n  cards.flat().filter(x => !x.matched).forEach(x => { x.flipped = false })\n  updateCards([...cards])\n  setDisableClicks(false)\n}\n\nasync function flashNewMatch (matchingCards, cards, updateCards) {\n  // flash a white shadow on the matching cards\n  matchingCards.forEach(x => { x.newMatch = true })\n  updateCards([...cards])\n  await new Promise(resolve => setTimeout(resolve, 900)) // wait in ms, remove the shadow\n  matchingCards.forEach(x => { x.newMatch = false })\n  updateCards([...cards])\n}\n\nfunction checkWin (cards) {\n  return cards.flat().every(x => x.matched)\n}\n\nfunction ResetButton ({ resetFunc, gameInProgressFunc }) {\n  function onClick () {\n    if (gameInProgressFunc() && window.confirm('Are you sure you would like to reset the game?')) {\n      resetFunc()\n    }\n  }\n  return <div className='btn' onClick={onClick}>reset</div>\n}\n\nfunction SizeSelector ({ selectFunc, currentSize, gameInProgressFunc }) {\n  function onClick (size) {\n    if (!gameInProgressFunc() || window.confirm('Are you sure you would like to change the board size?\\nThis will reset the game.')) {\n      selectFunc(size)\n    }\n  }\n  return (\n    <div className='sizeSelector'>\n      {SIZE_OPTIONS.map((size) => (\n        <div className={`btn ${size.every((x, i) => x === currentSize[i]) ? 'active' : ''}`}\n          key={size}\n          onClick={() => onClick(size)}>{size.join('x')}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction App () {\n  const [size, setSize] = useState([3, 4])\n  const [cards, updateCards] = useState([[]])\n  const [disableClicks, setDisableClicks] = useState(false)\n  const [gameOver, setGameOver] = useState(false)\n\n  useEffect(() => { // executes once unless size changes\n    updateCards(createCards(size))\n  }, [size])\n\n  async function flipCard (card) {\n    if (card.matched || gameOver) return\n    card.flipped = !card.flipped\n    updateCards([...cards])\n    if (!card.flipped) return // unflipped a single card\n    const flipCount = countFlippedUnmatched(cards)\n    const matchingCards = getMatchingCards(cards, card)\n    if (flipCount < 2) return\n    if (checkMatch(matchingCards)) {\n      makeMatch(matchingCards)\n      updateCards([...cards])\n      if (checkWin(cards)) {\n        setGameOver(true)\n      } else {\n        flashNewMatch(matchingCards, cards, updateCards)\n      }\n    } else {\n      unflipUnmatchedCards(cards, updateCards, setDisableClicks)\n    }\n  }\n\n  function gameInProgress () {\n    return cards.flat().some(x => x.flipped)\n  }\n\n  return (\n    <div className='app'>\n      <SizeSelector currentSize={size} selectFunc={newSize => setSize(newSize)} gameInProgressFunc={gameInProgress}/>\n      <div className={`game ${gameOver ? 'gameOver' : ''}`}>\n        {cards.map((row, i) => (\n          <div className='row' key={i}>\n            {row.map((card, j) => (\n              <Card\n                key={'' + i + j}\n                card={card}\n                gameOver={gameOver}\n                flipCard={flipCard.bind(null, card)}\n                disableClicks={disableClicks}\n                width={(size[0] > 3 ? 15 : 20) + 'vh'}\n              />)\n            )}\n          </div>\n        ))}\n      </div>\n      <ResetButton gameInProgressFunc={gameInProgress} resetFunc={() => updateCards(createCards(size)) }/>\n    </div>\n  )\n}\n\n// TODO mobile sizing - need to use vw instead of vh for cardSizing\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}